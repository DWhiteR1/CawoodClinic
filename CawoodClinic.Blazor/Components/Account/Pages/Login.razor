@page "/Account/Login"

@using CawoodClinic.Blazor.Components.Layout
@using System.ComponentModel.DataAnnotations
@using CawoodClinic.Blazor.Services
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CawoodClinic.Blazor.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject FullScreenService fullScreenService


<PageTitle>Log in</PageTitle>

<section class="h-100">
    <StatusMessage Message="@errorMessage" />
    <div class="container py-5 h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <div class="col-12 col-md-8 col-lg-6 col-xl-5">
                <div class="card shadow" style="border-radius: 1rem; background: linear-gradient(to bottom, #6f8fb2, #3f658f);">
                    <div class="card-body mb-md-5 mt-md-4 pb-5 p-5 text-center">
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator />
                            <h2 style="color:white">login</h2>
                            <hr />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="form-group">
                                <label for="exampleInputEmail1" class="form-label text-white mt-4">Email address</label>
                                <InputText type="email" @bind-Value="Input.Email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email" />
                            </div>
                            <div class="form-group">
                                <label for="exampleInputPassword1" class="form-label text-white mt-4">Password</label>
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" id="exampleInputPassword1" placeholder="Password" autocomplete="off" />
                            </div>
                            <br/>
                            <div class="checkbox mb-3">
                                <label class="form-label text-white">
                                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                    Remember me
                                </label>
                            </div>
                            <div>
                                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                            </div>
                            <br />
                            <div>
                                <p>
                                    <a href="Account/ForgotPassword" style="color:white">Forgot your password?</a>
                                </p>
                                <p>
                                    <a href="Account/ResendEmailConfirmation" style="color:white">Resend email confirmation</a>
                                </p>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        fullScreenService.ShowFullScreen = true;

        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            fullScreenService.ShowFullScreen = false;
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
